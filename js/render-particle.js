var gl = null; // WebGL context

// Store scene-related data and handles (will be filled further along initialisation)
var scene = {
  // shader
  shaderProgram : null,
  framebufferShader : null,

  // textures
  particleinit: null,

  // lights
  lights: {
    uLightSourcePosition0: vec3.fromValues(0, 0, 0)
  },

  // matrices for view and positions
  perspectiveMatrix: mat4.create(), // init with identity,
  translationMatrix: mat4.create(),
  mvMatrix: mat4.create(),
  normalMatrix: mat3.create(),

  aspectRatio: 1,

  // scene variables
  morphState: 0,
  timer: 0.0
};

/**
 * Triggered on resize document
 */
function resize() {
  canvas = document.getElementById('glcanvas');
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;

  // resize rendering area if gl is loaded
  if(gl) {
    gl.viewport(0, 0, canvas.width, canvas.height);
    initScene(canvas.width, canvas.height);
  }
}

function start() {
  canvas = document.getElementById("glcanvas");
  canvas.addEventListener("click", function() {
    if(canvas.requestFullScreen) {
      canvas.requestFullScreen();
    } else if(canvas.mozRequestFullScreen) {
      canvas.mozRequestFullScreen();
    } else if(canvas.webkitRequestFullScreen) {
      canvas.webkitRequestFullScreen();
    }
  });

  initWebGL(canvas);
  // Initialisierung des WebGL Kontextes

  // adjust canvas size
  resize();

  if (gl) {
    // clear screen to solid black
    gl.clearColor(0.0, 0.0, 0.0, 1.0);
    gl.clearDepth(1.0);

    // nearer objects overwrite distant objects
    //gl.enable(gl.DEPTH_TEST);
    gl.depthFunc(gl.LEQUAL);

    // alpha
    gl.enable(gl.BLEND);
    gl.blendFunc(gl.SRC_ALPHA, gl.ONE);

    // Initialize the shaders; this is where all the lighting for the
    // vertices and so forth is established.
    initDrawShaders();

    // Here's where we call the routine that builds all the objects
    // we'll be drawing.
    initBuffers();

    // Here we will load out textures
    initTexture();

    // Here we will set up additional scene data
    initScene(canvas.width, canvas.height);

    // Set up to draw the scene periodically.
    // TODO: window.requestAnimationFrame stattdessen benutzen
    var lastFrame = new Date();
    var loop = function( now ) {
      drawScene( now - lastFrame );
      lastFrame = now;
      window.requestAnimationFrame( loop );
    };
    loop( lastFrame );
  }
}


function initWebGL() {
  try {
    gl = canvas.getContext("experimental-webgl");
  } catch(e) {
  }

  // Complain about not having webGL context
  if (!gl) {
    alert("WebGL could not be initialized.");
  }
}


function initDrawShaders() {
  var fragmentShader = getShader(gl, "shader-fs");
  var vertexShader = getShader(gl, "shader-vs");

  // Create Shader
  var shaderProgram = gl.createProgram();
  gl.attachShader(shaderProgram, vertexShader);
  gl.attachShader(shaderProgram, fragmentShader);
  gl.linkProgram(shaderProgram);

  // Throw error if linking fails
  if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
    alert("Initialisation of shaderProgram failed.");
  }

  gl.useProgram(shaderProgram);

  var aVertexPosition = gl.getAttribLocation(shaderProgram, "aVertexPosition");
  gl.enableVertexAttribArray(aVertexPosition);

  var aTextureCoord = gl.getAttribLocation(shaderProgram, "aTextureCoord");
  gl.enableVertexAttribArray(aTextureCoord);

  var aVertexPositionAlt = gl.getAttribLocation(shaderProgram, "aVertexPositionAlt");
  gl.enableVertexAttribArray(aVertexPositionAlt);

  // Save variable pointers
  shaderProgram.aVertexPosition = aVertexPosition;
  shaderProgram.aTextureCoord = aTextureCoord;
  shaderProgram.aVertexPositionAlt = aVertexPositionAlt;

  shaderProgram.uPMatrix = gl.getUniformLocation(shaderProgram, "uPMatrix");
  shaderProgram.uMVMatrix = gl.getUniformLocation(shaderProgram, "uMVMatrix");
  shaderProgram.uNMatrix = gl.getUniformLocation(shaderProgram, "uNMatrix");

  shaderProgram.uMorphTransition = gl.getUniformLocation(shaderProgram, "uMorphTransition");
  shaderProgram.uMorphTransition2 = gl.getUniformLocation(shaderProgram, "uMorphTransition2");
  shaderProgram.uAspectRatio = gl.getUniformLocation(shaderProgram, "uAspectRatio");


  // Add shader to scene
  scene.shaderProgram = shaderProgram;
}


function initBuffers() {
  //var pointsCube = particles.pointCube(10, 4, vec3.fromValues(0, 0, 0)); // 360 points
  //var particleArr = particles.pointsToParticle(pointsCube);

  // second mesh to morph into
  var pointsSphere = particles.pointSphere(496, 20, 5, vec3.fromValues(0, 0, 0));
  var sphereParticles = particles.pointsToParticle(pointsSphere);

  // 32c3 logo
  var pointsLogo = particles.pointSVG(
    "m 240.4163,603.85447 c -2.39911,2.0203 -4.74648,3.60281 -7.02796,4.79824 -2.28149,1.19544 -4.49709,2.00381 -6.63268,2.47583 -2.13559,0.47202 -4.19116,0.60771 -6.15257,0.45778 -1.96142,-0.14992 -3.82869,-0.58546 -5.58767,-1.25587 -1.75898,-0.67041 -3.40967,-1.57571 -4.93793,-2.66515 -1.52827,-1.08944 -2.93411,-2.36303 -4.20339,-3.77003 -1.26928,-1.40701 -2.40201,-2.94744 -3.38404,-4.57055 -0.98203,-1.62312 -1.81336,-3.32892 -2.47986,-5.06669 -2.72197,-0.3188 -5.59818,-0.4782 -8.38139,-0.53798 -2.78321,-0.0598 -5.47343,-0.0199 -7.82339,0.0598 -2.34997,0.0797 -4.35968,0.19925 -5.78191,0.29888 -1.42223,0.0996 -2.25697,0.17932 -2.25697,0.17932 0.95663,3.44185 2.09526,6.61226 3.39355,9.52665 1.2983,2.91439 2.75625,5.57276 4.35154,7.99053 1.59529,2.41778 3.3279,4.59497 5.1755,6.54699 1.84761,1.95202 3.81021,3.67889 5.86546,5.19601 2.05525,1.51712 4.20316,2.82451 6.42138,3.9376 2.21823,1.11308 4.50677,2.03186 6.8433,2.77175 2.33653,0.7399 4.72104,1.30092 7.1312,1.69848 2.41016,0.39757 4.84597,0.63169 7.28509,0.71778 2.43912,0.0861 4.79987,-0.063 7.0792,-0.41527 2.27932,-0.35231 4.4772,-0.9079 6.59059,-1.63492 2.11339,-0.72702 4.14227,-1.62545 6.08359,-2.66345 1.94131,-1.03799 3.79505,-2.21555 5.55814,-3.50083 1.7631,-1.28528 3.43555,-2.67826 5.01429,-4.1471 1.57874,-1.46883 3.06377,-3.01352 4.45201,-4.60221 1.38824,-1.58869 2.6797,-3.22138 3.87131,-4.8662 1.19161,-1.64483 2.28337,-3.3018 3.2722,-4.93906 0.98883,-1.63725 1.83722,-3.35996 2.55837,-5.1412 0.72116,-1.78124 1.31509,-3.62102 1.79502,-5.49242 0.47993,-1.8714 0.84585,-3.77443 1.11099,-5.68216 0.26514,-1.90774 0.4295,-3.82019 0.5063,-5.71044 0.0768,-1.89025 0.0661,-3.7583 -0.019,-5.57724 -0.0851,-1.81895 -0.24454,-3.58878 -0.46512,-5.28259 -0.22058,-1.6938 -0.50226,-3.31159 -0.83182,-4.82644 -0.32957,-1.51485 -0.70702,-2.92677 -1.11916,-4.20884 -0.82428,-2.56414 -2.15187,-4.9195 -3.6796,-7.0102 -1.52773,-2.09071 -3.2556,-3.91677 -4.88043,-5.42231 -1.62483,-1.50554 -3.14662,-2.69056 -4.26221,-3.49919 -1.11559,-0.80864 -1.82497,-1.24089 -1.82497,-1.24089 0,0 1.16498,-0.95774 2.92108,-2.62054 1.75611,-1.6628 4.10336,-4.03066 6.46789,-6.85088 1.18226,-1.41011 2.36885,-2.9333 3.48803,-4.538 1.11918,-1.60471 2.17095,-3.29091 3.08359,-5.02703 0.91264,-1.73612 1.68613,-3.52216 2.24876,-5.32653 0.56263,-1.80437 0.91439,-3.62707 0.98355,-5.43652 0.0692,-1.80944 -0.004,-3.66051 -0.21866,-5.53661 -0.21467,-1.87611 -0.57085,-3.77726 -1.06774,-5.68688 -0.49689,-1.90962 -1.1345,-3.82771 -1.91201,-5.73769 -0.77752,-1.90999 -1.69494,-3.81186 -2.75147,-5.68907 -1.05653,-1.8772 -2.25216,-3.72973 -3.58609,-5.541 -1.33394,-1.81128 -2.80617,-3.5813 -4.4159,-5.2935 -1.60973,-1.7122 -3.35696,-3.36658 -5.24089,-4.94656 -1.88392,-1.57999 -3.90454,-3.08557 -6.06105,-4.50018 -2.15651,-1.41461 -4.40658,-2.54417 -6.71663,-3.42138 -2.31005,-0.8772 -4.68009,-1.50205 -7.07652,-1.90723 -2.39643,-0.40518 -4.81927,-0.59069 -7.23494,-0.58923 -2.41567,0.001 -4.82416,0.18991 -7.1919,0.53263 -2.36774,0.34273 -4.69474,0.83972 -6.9474,1.45831 -2.25266,0.61858 -4.431,1.35876 -6.50143,2.18783 -2.07044,0.82908 -4.03296,1.74705 -5.85401,2.72123 -1.82104,0.97418 -3.5006,2.00457 -5.00511,3.05847 -1.5045,1.0539 -2.89331,2.37308 -4.17184,3.87475 -1.27853,1.50166 -2.44678,3.18582 -3.51016,4.96968 -1.06338,1.78386 -2.0219,3.66743 -2.88098,5.56791 -0.85907,1.90048 -1.6187,3.81788 -2.28429,5.66941 -1.33118,3.70307 -2.28624,7.14266 -2.90851,9.65648 -0.62227,2.51382 -0.91174,4.10188 -0.91174,4.10188 l 5.80838,0.12627 5.80838,0.12627 5.80838,0.12627 5.80838,0.12627 c 0,0 0.65558,-1.78686 1.9012,-4.37557 1.24563,-2.58871 3.08131,-5.97926 5.44151,-9.18665 1.1801,-1.6037 2.49134,-3.1616 3.92552,-4.55058 1.43417,-1.38899 2.99129,-2.60905 4.66316,-3.53707 1.67187,-0.92802 3.4585,-1.564 5.35168,-1.7848 1.89319,-0.2208 3.89294,-0.0264 5.99105,0.70624 2.09812,0.73267 4.00281,1.59429 5.71491,2.5653 1.7121,0.97101 3.2316,2.0514 4.55931,3.22161 1.32772,1.17021 2.46365,2.43025 3.40862,3.76054 0.94496,1.33028 1.69896,2.73083 2.26281,4.18205 0.56385,1.45123 0.93755,2.95314 1.12192,4.48617 0.18438,1.53303 0.17942,3.09718 -0.0141,4.67288 -0.19347,1.5757 -0.57546,3.16296 -1.14514,4.74221 -0.56968,1.57924 -1.32706,3.15047 -2.27132,4.69412 -0.94426,1.54365 -2.16542,2.90658 -3.57951,4.10984 -1.41408,1.20326 -3.02109,2.24686 -4.73704,3.15185 -1.71595,0.905 -3.54085,1.67139 -5.39071,2.32025 -1.84986,0.64885 -3.72468,1.18017 -5.54049,1.615 -3.63162,0.86967 -7.02717,1.35343 -9.51481,1.61977 -2.48765,0.26634 -4.06739,0.31527 -4.06739,0.31527 l 0.37881,5.80838 0.3788,5.80837 0.37881,5.80838 0.37881,5.80838 c 0,0 1.84087,0.0216 4.71805,0.30897 2.87718,0.2874 6.79068,0.84062 10.93595,1.9039 2.07264,0.53164 4.20321,1.19081 6.29117,2.00802 2.08795,0.81722 4.13328,1.79249 6.03542,2.95633 1.90214,1.16384 3.66108,2.51627 5.17627,4.08781 1.51518,1.57154 2.78661,3.3622 3.7137,5.40249 0.9271,2.0403 1.49615,4.03613 1.78218,5.96675 0.28604,1.93062 0.28905,3.79601 0.0841,5.57542 -0.20498,1.7794 -0.61795,3.47282 -1.16389,5.05949 -0.54593,1.58667 -1.22484,3.06659 -1.96169,4.41898 -1.4737,2.70479 -3.17917,4.89951 -4.51622,6.41802 -1.33705,1.51852 -2.30567,2.36084 -2.30567,2.36084 0,0 0.1599,1.32012 0.57286,3.41221 0.41296,2.09209 1.07897,4.95615 2.09119,8.04403 1.01222,3.08788 2.37064,6.39959 4.16843,9.38698 1.79778,2.98738 4.03493,5.65045 6.80458,7.44105 2.76965,1.7906 6.26949,2.55963 9.96131,2.70596 3.69182,0.14634 7.57563,-0.33002 11.11323,-1.03021 3.5376,-0.70019 6.72899,-1.6242 9.03599,-2.37316 2.30699,-0.74897 3.72958,-1.32289 3.72958,-1.32289 1.57837,0.12627 3.31457,0.24268 5.18271,0.34996 1.86814,0.10728 3.86822,0.20543 5.97435,0.2952 2.10613,0.0898 4.3183,0.17115 6.61063,0.24489 2.29232,0.0737 4.6648,0.13983 7.09153,0.19902 2.42673,0.0592 4.90772,0.11147 7.41708,0.15759 2.50935,0.0461 5.04706,0.0861 7.58724,0.12059 2.54018,0.0345 5.08282,0.0636 7.60204,0.0881 2.51921,0.0244 5.015,0.0442 7.46146,0.0599 2.44646,0.0158 4.8436,0.0276 7.16552,0.0362 2.32193,0.009 4.56863,0.0141 6.71422,0.0171 2.14559,0.003 4.19006,0.004 6.10752,0.002 1.91747,-0.001 3.70793,-0.004 5.34548,-0.008 3.2751,-0.008 5.93859,-0.0199 7.7833,-0.0297 1.84471,-0.01 2.87065,-0.0177 2.87065,-0.0177 1.01015,-2.27284 1.51523,-4.89293 1.70463,-7.54458 0.1894,-2.65164 0.0631,-5.33486 -0.1894,-7.73397 -0.25254,-2.39912 -0.63134,-4.51412 -0.94702,-6.02935 -0.31567,-1.51523 -0.56821,-2.43068 -0.56821,-2.43068 -2.46224,-0.31567 -5.27962,-0.56032 -8.32488,-0.74677 -3.04525,-0.18644 -6.31838,-0.31468 -9.69214,-0.39754 -3.37375,-0.0829 -6.84812,-0.12035 -10.29586,-0.12529 -3.44773,-0.005 -6.86883,0.0227 -10.13605,0.07 -6.53443,0.0947 -12.45329,0.26827 -16.73854,0.41823 -4.28526,0.14995 -6.93691,0.27625 -6.93691,0.27625 0,0 2.96732,0.66291 7.66295,1.8309 2.34781,0.58399 5.12771,1.29426 8.1848,2.11106 3.05709,0.81681 6.39138,1.74015 9.848,2.7503 3.45662,1.01015 7.03556,2.10711 10.58194,3.27116 3.54639,1.16404 7.06022,2.39516 10.38662,3.67364 3.3264,1.27847 6.46537,2.6043 9.26203,3.95775 2.79666,1.35344 5.25102,2.73451 7.20819,4.12347 m 189.90868,-92.42896 c -2.77792,-0.50507 -5.79002,-0.44352 -8.80542,0.099 -3.0154,0.54255 -6.0341,1.56611 -8.82522,2.98505 -2.79112,1.41894 -5.35467,3.23326 -7.45977,5.35735 -2.10511,2.12409 -3.75176,4.55795 -4.70909,7.21594 -0.89772,2.49249 -1.75948,4.83641 -2.657,7.07042 -0.89752,2.23401 -1.8308,4.35813 -2.87159,6.41103 -1.04079,2.0529 -2.18906,4.03459 -3.51656,5.98376 -1.3275,1.94917 -2.83423,3.86581 -4.59191,5.7886 -1.75768,1.9228 -3.70892,3.38815 -5.75778,4.62326 -2.04886,1.23512 -4.19535,2.23999 -6.34354,3.24183 -2.1482,1.00184 -4.2981,2.00065 -6.3538,3.22363 -2.05569,1.22298 -4.01718,2.67013 -5.78854,4.56865 -1.77136,1.89853 -3.57249,4.67869 -5.27779,7.78102 -1.70531,3.10232 -3.31479,6.52681 -4.70285,9.71398 -1.38806,3.18717 -2.5547,6.13703 -3.37433,8.29009 -0.81963,2.15306 -1.29224,3.50933 -1.29224,3.50933 M 624.27427,600.8239 c -1.9709,0.32848 -3.8905,0.48287 -5.77498,0.55581 -1.88447,0.0729 -3.73382,0.0644 -5.5642,0.0672 -1.83039,0.003 -3.64182,0.0167 -5.45046,0.1345 -1.80864,0.11783 -3.61449,0.33953 -5.43372,0.75776 -1.81923,0.41823 -6.22979,1.93672 -12.02035,4.02276 -5.79057,2.08605 -12.96115,4.73965 -20.30043,7.42811 -3.66965,1.34423 -7.38146,2.69718 -10.98404,3.99226 -3.60258,1.29508 -7.09592,2.53229 -10.3286,3.64505 -3.23268,1.11276 -6.20471,2.10106 -8.76468,2.89832 -2.55996,0.79726 -4.70786,1.40348 -6.29227,1.75208 -3.16883,0.6972 -5.9583,0.85136 -8.48493,0.73115 -2.52663,-0.12021 -4.79042,-0.5148 -6.9079,-0.91509 -2.11748,-0.4003 -4.08865,-0.80631 -6.03002,-0.94939 -1.94138,-0.14307 -3.85296,-0.0232 -5.85127,0.62826 -2.19061,2.15121 -4.44162,4.07547 -6.72438,5.79355 -2.28276,1.71808 -4.59726,3.22998 -6.91485,4.55646 -2.31759,1.32648 -4.63826,2.46755 -6.93335,3.44397 -2.29509,0.97642 -4.5646,1.78819 -6.77986,2.45609 -4.43053,1.33579 -8.64409,2.09606 -12.41136,2.44697 -3.76727,0.35091 -7.08827,0.29245 -9.73367,-0.009 -2.6454,-0.30168 -5.54646,-1.46267 -8.41002,-3.03446 -2.86356,-1.5718 -5.68961,-3.55439 -8.18499,-5.49927 -2.49538,-1.94488 -4.66008,-3.85205 -6.20094,-5.27301 -1.54086,-1.42095 -2.45787,-2.35569 -2.45787,-2.35569 0,0 -1.10485,-1.57836 -2.69111,-4.35628 -1.58625,-2.77792 -3.65391,-6.7554 -5.57951,-11.55362 -0.9628,-2.39911 -1.89009,-5.00341 -2.70394,-7.76555 -0.81384,-2.76214 -1.51424,-5.68211 -2.02326,-8.71257 -0.50902,-3.03046 -0.82667,-6.1714 -0.87501,-9.37548 -0.0483,-3.20407 0.17263,-6.47129 0.74085,-9.75428 m 204.55589,-7.07107 c 0,0 -0.94702,-0.18941 -2.49381,-0.41038 -1.5468,-0.22097 -3.69338,-0.47351 -6.09249,-0.59977 -2.39911,-0.12626 -5.05076,-0.12626 -7.60771,0.15784 -2.55695,0.2841 -5.0192,0.85231 -7.0395,1.86246 M 530.83516,511.4254 c 0.31567,-3.78807 0.83867,-7.28013 1.54945,-10.49742 0.71078,-3.21729 1.60934,-6.1598 2.67614,-8.84877 1.0668,-2.68897 2.30183,-5.1244 3.68556,-7.32753 1.38372,-2.20312 2.91613,-4.17393 4.5777,-5.93368 1.66156,-1.75974 3.45227,-3.30841 5.35257,-4.66724 1.90031,-1.35883 3.91021,-2.52782 6.01017,-3.52821 2.09996,-1.00039 4.28998,-1.83217 6.5505,-2.51659 2.26053,-0.68441 4.59156,-1.22146 6.97356,-1.63236 2.382,-0.4109 4.83234,-0.56506 7.31141,-0.48128 2.47907,0.0838 4.98686,0.40549 7.48375,0.94631 2.49689,0.54083 4.98287,1.30076 7.41833,2.261 2.43546,0.96023 4.82038,2.12076 7.11516,3.46277 2.29478,1.34201 4.49939,2.8655 6.57424,4.55164 2.07484,1.68615 4.0199,3.53496 5.79556,5.52761 1.77566,1.99265 3.38192,4.12914 4.77914,6.39066 1.39722,2.26152 2.58542,4.64806 3.52496,7.1408 0.93954,2.49275 1.72011,5.0101 2.33954,7.52266 0.61942,2.51256 1.0777,5.02033 1.37264,7.4939 0.29494,2.47358 0.42655,4.91296 0.39263,7.28875 -0.0339,2.37578 -0.23336,4.68798 -0.6005,6.90717 -0.36715,2.2192 -0.902,4.3454 -1.60675,6.34921 -0.70475,2.00381 -1.5794,3.88522 -2.62612,5.61484 -1.04672,1.72962 -2.26553,3.30744 -3.6586,4.70406 -1.39308,1.39662 -2.96042,2.61205 -4.70421,3.61688 1.41293,2.07812 2.79385,4.17157 4.11912,6.27881 1.32526,2.10725 2.59486,4.22827 3.78516,6.36152 1.1903,2.13325 2.30129,4.27872 3.30934,6.43487 1.00804,2.15614 1.91314,4.32295 2.69164,6.49888 0.7785,2.17592 1.4304,4.36096 1.93207,6.55355 0.50166,2.19259 0.85308,4.39273 1.03062,6.59888 0.17753,2.20614 0.18118,4.41828 -0.0127,6.63486 -0.19388,2.21657 -0.5853,4.43759 -1.19789,6.66149 -0.6126,2.2239 -1.44838,4.45061 -2.48175,6.64486 -1.03337,2.19426 -2.26433,4.35606 -3.66727,6.45015 -1.40295,2.09409 -2.97788,4.12048 -4.69919,6.0439 -1.72132,1.92341 -3.58902,3.74386 -5.5775,5.42609 -1.98849,1.68222 -4.09776,3.22623 -6.30221,4.59675 -2.20445,1.37052 -4.50409,2.56755 -6.87331,3.55585 -2.36922,0.98829 -4.80802,1.76785 -7.2908,2.3034 -2.48278,0.53556 -5.00954,0.82711 -7.55468,0.83941 -2.54515,0.0123 -5.18148,-0.3457 -7.84824,-1.01661 -2.66676,-0.6709 -5.36394,-1.65471 -8.03076,-2.89403 -2.66683,-1.23932 -5.3033,-2.73415 -7.84866,-4.42709 -2.54535,-1.69294 -4.99959,-3.584 -7.30192,-5.61578 -2.30234,-2.03178 -4.45277,-4.20428 -6.39054,-6.46011 -1.93777,-2.25582 -3.66288,-4.59498 -5.11454,-6.96007 -1.45166,-2.36508 -2.62988,-4.7561 -3.47389,-7.11566 -0.84401,-2.35956 -1.35381,-4.68766 -1.46862,-6.9269 1.89403,-1.26269 4.10374,-1.95717 6.35291,-2.28863 2.24917,-0.33145 4.53779,-0.29989 6.58967,-0.11049 2.05187,0.1894 3.86699,0.53664 5.16914,0.83653 1.30215,0.29989 2.09133,0.55243 2.09133,0.55243 0.63135,1.19956 1.42635,2.48634 2.36508,3.802 0.93873,1.31566 2.02118,2.66019 3.2274,3.97522 1.20623,1.31504 2.53623,2.60059 3.97008,3.79829 1.43385,1.1977 2.97153,2.30755 4.59311,3.2712 1.62158,0.96364 3.32706,1.78108 5.09649,2.39394 1.76943,0.61286 3.60282,1.02116 5.48023,1.16653 1.87741,0.14537 3.79883,0.0278 5.74433,-0.41104 1.94549,-0.43885 3.91507,-1.19898 5.88877,-2.33877 1.97371,-1.13979 3.68763,-2.38355 5.1664,-3.70892 1.47878,-1.32537 2.7224,-2.73234 3.7555,-4.19854 1.0331,-1.4662 1.85568,-2.99161 2.49237,-4.55386 0.63669,-1.56226 1.08748,-3.16136 1.37702,-4.77491 0.28953,-1.61355 0.41781,-3.24156 0.40946,-4.86165 -0.008,-1.62008 -0.15334,-3.23224 -0.41033,-4.8141 -0.25699,-1.58186 -0.62598,-3.13341 -1.08234,-4.63228 -0.45635,-1.49886 -1.00008,-2.94504 -1.60655,-4.31615 -1.21294,-2.74222 -3.00915,-4.63988 -5.18149,-6.00164 -2.17233,-1.36176 -4.72077,-2.18761 -7.43818,-2.78622 -2.71741,-0.59861 -5.60378,-0.96998 -8.45196,-1.42275 -2.84818,-0.45278 -5.65816,-0.98697 -8.2228,-1.91122 -0.2021,-2.90199 -0.39785,-5.71038 -0.57779,-8.29059 -0.17995,-2.58021 -0.34409,-4.93225 -0.48297,-6.92153 -0.13888,-1.98929 -0.2525,-3.61583 -0.3314,-4.74505 -0.0789,-1.12921 -0.12307,-1.76111 -0.12307,-1.76111 2.58218,0.25732 4.98229,0.33399 7.20874,0.23735 2.22645,-0.0966 4.27924,-0.36659 6.16676,-0.80249 1.88752,-0.4359 3.60976,-1.03777 5.17513,-1.79825 1.56537,-0.76048 2.97386,-1.67958 4.23387,-2.74995 1.26001,-1.07037 2.37154,-2.29201 3.34298,-3.65758 0.97144,-1.36557 1.8028,-2.87506 2.50246,-4.52114 0.69966,-1.64608 1.26763,-3.42873 1.71229,-5.34063 0.44467,-1.91189 0.76604,-3.95303 0.9725,-6.11605 0.20646,-2.16303 0.0638,-4.16334 -0.36394,-6.00298 -0.42774,-1.83965 -1.14057,-3.51862 -2.07448,-5.03897 -0.9339,-1.52034 -2.08887,-2.88207 -3.40088,-4.08721 -1.31201,-1.20514 -2.78105,-2.25371 -4.34312,-3.14773 -1.56207,-0.89403 -3.21715,-1.63352 -4.90123,-2.22051 -1.68407,-0.587 -3.39713,-1.02151 -5.07517,-1.30556 -1.67803,-0.28405 -3.32103,-0.41766 -4.86497,-0.40287 -1.54394,0.0148 -2.98882,0.178 -4.27063,0.48757 -1.2818,0.30957 -2.4878,0.91265 -3.61691,1.73104 -1.12912,0.81839 -2.18135,1.85209 -3.15563,3.02288 -0.97427,1.17079 -1.87059,2.47866 -2.68788,3.84541 -0.81728,1.36675 -1.55553,2.79236 -2.21367,4.19864 -1.31627,2.81254 -2.31209,5.54769 -2.97884,7.57971 -0.66675,2.03202 -1.00444,3.3609 -1.00444,3.3609 l -6.06091,-0.75761 -6.06092,-0.75762 -6.06092,-0.75762 z m -50.00256,9.09137 c 0.4691,-2.60843 0.54002,-5.05873 0.27399,-7.34808 -0.26603,-2.28936 -0.86901,-4.41779 -1.7477,-6.38248 -0.87869,-1.96469 -2.0331,-3.76566 -3.40198,-5.40011 -1.36888,-1.63445 -2.95223,-3.10238 -4.68883,-4.40101 -1.7366,-1.29863 -3.62643,-2.42794 -5.60828,-3.38515 -1.98184,-0.95721 -4.05569,-1.74232 -6.1603,-2.35254 -2.10461,-0.61022 -4.24,-1.04555 -6.34491,-1.30319 -2.10491,-0.25765 -4.17936,-0.3376 -6.1621,-0.23709 -1.98274,0.10051 -3.86613,0.47874 -5.64777,1.10475 -1.78163,0.62601 -3.4615,1.49979 -5.0372,2.59142 -1.57569,1.09162 -3.0472,2.40109 -4.41212,3.89846 -1.36492,1.49738 -2.62324,3.18265 -3.77255,5.0259 -1.14931,1.84325 -2.18961,3.84447 -3.11848,5.97372 -0.92887,2.12924 -1.7463,4.38653 -2.4499,6.7419 -0.7036,2.35538 -1.29335,4.80886 -1.76683,7.33049 -0.47349,2.52164 -0.83071,5.11144 -1.06926,7.73946 -0.47709,5.25604 -0.87993,10.5017 -1.15107,15.5958 -0.13557,2.54705 -0.23822,5.05621 -0.30076,7.50982 -0.0625,2.45361 -0.085,4.85169 -0.0601,7.17657 0.0248,2.32489 0.097,4.57658 0.22355,6.73743 0.12659,2.16085 0.30764,4.23087 0.55034,6.19239 0.48539,3.92304 1.21734,7.41213 2.25331,10.32608 0.51798,1.45697 1.16538,2.99544 1.93547,4.57279 0.77009,1.57735 1.66287,3.19357 2.67164,4.80604 1.00877,1.61247 2.13351,3.22118 3.36752,4.78351 1.23401,1.56232 2.57728,3.07825 4.02311,4.50517 1.44582,1.42691 2.99419,2.76481 4.6384,3.97107 1.6442,1.20625 3.38423,2.28085 5.21339,3.18118 1.82915,0.90032 3.74742,1.62637 5.74809,2.13552 2.00067,0.50914 4.08373,0.80137 6.24249,0.83406 2.15875,0.0327 4.19223,-0.23678 6.11035,-0.75384 1.91811,-0.51706 3.72086,-1.28172 5.41816,-2.23941 1.69729,-0.95769 3.28912,-2.10842 4.7854,-3.39762 1.49628,-1.2892 2.89701,-2.71688 4.2121,-4.22847 1.31508,-1.51159 2.54452,-3.1071 3.69821,-4.73195 1.1537,-1.62486 2.23165,-3.27908 3.24378,-4.90808 1.01212,-1.629 1.95841,-3.2328 2.84877,-4.75683 0.89035,-1.52403 1.72478,-2.96829 2.51319,-4.27822 2.71324,0.28432 5.30099,0.71059 7.65641,1.19006 2.35541,0.47946 4.4785,1.01213 6.26244,1.50926 1.78393,0.49713 3.22871,0.95872 4.22751,1.29603 0.9988,0.3373 1.55161,0.55033 1.55161,0.55033 0.43864,1.50696 0.47889,3.24374 0.18644,5.1354 -0.29244,1.89166 -0.91758,3.9382 -1.8097,6.06467 -0.89213,2.12648 -2.05124,4.33288 -3.41164,6.54428 -1.36041,2.21139 -2.9221,4.42778 -4.61937,6.57421 -3.39455,4.29286 -7.33145,8.3059 -11.28509,11.43955 -3.95364,3.13365 -7.92402,5.38792 -11.38552,6.16323 -1.73075,0.38766 -3.52938,0.76672 -5.37907,1.12322 -1.8497,0.35651 -3.75046,0.69045 -5.68546,0.98788 -1.93501,0.29743 -3.90427,0.55833 -5.89097,0.76876 -1.98669,0.21043 -3.99083,0.37037 -5.99558,0.46588 -4.00951,0.19101 -8.9054,0.25052 -13.79553,-0.5645 -4.89013,-0.81502 -9.77452,-2.50458 -13.76102,-5.8117 -2.85663,-2.3698 -4.88434,-3.50933 -6.78599,-4.89709 -1.90166,-1.38776 -3.67726,-3.02375 -6.02965,-6.38646 -1.1762,-1.68136 -2.29059,-3.43805 -3.34756,-5.24287 -1.05696,-1.80483 -2.0565,-3.65779 -3.003,-5.53168 -0.9465,-1.87389 -1.83995,-3.76872 -2.68473,-5.65727 -0.84478,-1.88856 -1.6409,-3.77084 -2.39273,-5.61966 -0.75183,-1.84881 -1.47032,-4.15778 -2.13667,-6.82454 -0.66636,-2.66675 -1.28058,-5.69129 -1.82387,-8.97125 -0.54329,-3.27996 -1.01565,-6.81532 -1.3983,-10.50374 -0.38264,-3.68841 -0.67556,-7.52986 -0.85997,-11.42198 -0.0461,-3.6539 -0.10743,-7.31009 -0.0983,-10.94715 0.009,-3.63705 0.0886,-7.25497 0.32427,-10.83233 0.23564,-3.57736 0.62739,-7.11417 1.26093,-10.589 0.63354,-3.47483 1.50886,-6.88768 2.71164,-10.21714 0.98439,-2.65949 2.04426,-5.23411 3.17816,-7.7119 1.1339,-2.47779 2.34184,-4.85876 3.62235,-7.13097 1.28051,-2.2722 2.63361,-4.43564 4.05784,-6.47836 1.42422,-2.04273 2.91958,-3.96475 4.48463,-5.75412 1.56504,-1.78937 3.19978,-3.44609 4.90274,-4.95821 1.70297,-1.51213 3.47417,-2.87966 5.31215,-4.09066 1.83799,-1.211 3.74276,-2.26546 5.71287,-3.15145 1.97011,-0.88599 4.00556,-1.6035 6.1049,-2.14059 2.09933,-0.53709 4.20791,-0.97273 6.32447,-1.30793 2.11656,-0.33521 4.24112,-0.56999 6.3724,-0.70538 2.13128,-0.13539 4.26931,-0.17138 6.41282,-0.10902 2.14351,0.0624 4.29251,0.22309 6.44575,0.48114 2.15324,0.25805 4.31071,0.61342 6.47118,1.06509 2.16046,0.45167 4.32391,0.99963 6.48911,1.64285 2.16519,0.64322 4.33213,1.3817 6.49956,2.21441 2.16742,0.8327 4.33533,1.75963 6.50249,2.77976 2.16715,1.02012 4.21494,2.2079 6.1329,3.53846 1.91795,1.33056 3.70608,2.80392 5.35393,4.39519 1.64784,1.59127 3.15541,3.30047 4.51223,5.10272 1.35682,1.80226 2.5629,3.69757 3.60778,5.66108 1.04488,1.96351 1.92856,3.99521 2.64058,6.07025 0.71203,2.07503 1.25239,4.1934 1.61065,6.33023 0.35825,2.13684 0.5344,4.29214 0.51797,6.44104 -0.0164,2.14891 -0.22543,4.29141 -0.63745,6.40266 -3.76074,5.66864 -4.93966,9.52113 -4.68908,11.90408 0.25058,2.38294 1.93067,3.29634 3.88797,3.08676 1.9573,-0.20958 4.1918,-1.54212 5.55121,-3.65105 1.35941,-2.10892 1.84373,-4.99423 0.30066,-8.30933 -0.82401,-1.82882 -2.67013,-2.60701 -5.1697,-2.84276 -2.49956,-0.23575 -5.65258,0.0709 -9.09039,0.41182 -1.71891,0.17045 -3.50902,0.34945 -5.32424,0.47348 -1.81523,0.12403 -3.65557,0.1931 -5.47495,0.14366 -1.81938,-0.0494 -3.6178,-0.21737 -5.34917,-0.56733 -1.73137,-0.34996 -3.3957,-0.88194 -4.9469,-1.65948 z m -102.0254,-3.53553 c 2.20971,2.46224 4.34839,4.79033 6.41802,6.96452 2.06963,2.1742 4.0702,4.1945 6.0037,6.04119 1.93349,1.84669 3.79991,3.51975 5.60122,4.99947 1.8013,1.47971 3.5375,2.76608 5.21057,3.83936 3.34613,2.14657 6.43972,3.44083 9.29656,3.72493 2.85684,0.28411 5.47692,-0.44193 7.87604,-2.33597 m -69.19545,29.29443 c 0,0 0.22469,0.38448 0.68706,1.00712 0.46238,0.62265 1.16243,1.48347 2.11317,2.43615 0.95074,0.95269 2.15215,1.99725 3.61724,2.98736 1.46509,0.99012 3.19385,1.9258 5.19928,2.66074 2.45058,0.89808 5.12796,0.71577 7.92342,-0.0234 2.79546,-0.73917 5.709,-2.0352 8.63189,-3.36457 2.92289,-1.32937 5.85513,-2.69209 8.688,-3.56462 2.83286,-0.87254 5.56635,-1.25489 8.09173,-0.62355 m -107.07617,57.57869 8.20748,-5.68211 8.20749,-5.68211 8.20749,-5.6821 8.20749,-5.68211 6.18718,-7.95495 6.18719,-7.95495 6.18718,-7.95495 6.18719,-7.95495 6.18718,-7.95495 6.18719,-7.95496 6.18718,-7.95495 6.18719,-7.95495 c 1.6338,-2.50785 2.29955,-4.44845 3.02391,-6.47347 0.72435,-2.02502 1.50733,-4.13446 3.3756,-6.97997 1.69222,-2.57737 2.27338,-7.13791 2.38559,-11.85933 0.11221,-4.72141 -0.24454,-9.60371 -0.42815,-12.8246 -0.26007,-4.56221 -0.71812,-6.67495 -1.71282,-8.533 -0.9947,-1.85805 -2.52603,-3.46141 -4.93267,-7.00486 -1.20332,-1.77172 -2.52998,-3.46118 -3.96649,-5.05932 -1.43652,-1.59813 -2.98288,-3.10493 -4.62561,-4.51135 -1.64272,-1.40641 -3.3818,-2.71244 -5.20375,-3.90901 -1.82194,-1.19657 -3.72675,-2.28369 -5.70093,-3.25229 -1.97418,-0.9686 -4.01773,-1.81868 -6.11715,-2.54118 -2.09943,-0.7225 -4.25473,-1.31741 -6.45241,-1.77569 -2.19768,-0.45828 -4.43775,-0.7799 -6.70671,-0.95582 -2.26896,-0.17591 -4.56681,-0.20611 -6.88005,-0.0815 -2.20423,0.14795 -4.273,0.47075 -6.21465,0.94598 -1.94164,0.47522 -3.75616,1.10287 -5.45187,1.8605 -1.69571,0.75764 -3.27262,1.64525 -4.73904,2.64042 -1.46642,0.99517 -2.82236,2.09789 -4.07613,3.28572 -1.25377,1.18784 -2.40538,2.46079 -3.46314,3.79643 -1.05776,1.33563 -2.02168,2.73395 -2.90007,4.17251 -0.8784,1.43856 -1.67127,2.91737 -2.38693,4.41399 -0.71567,1.49663 -1.35413,3.01106 -1.92371,4.52087 -1.13916,3.01962 -2.0028,6.02075 -2.65747,8.8239 -0.65468,2.80315 -1.10039,5.40833 -1.40371,7.63605 -0.30332,2.22773 -0.46424,4.07801 -0.54933,5.37135 -0.0851,1.29334 -0.0944,2.02975 -0.0944,2.02975 0,0 0.82075,0.22097 2.18604,0.4893 1.36528,0.26832 3.2751,0.58399 5.45324,0.77339 2.17814,0.1894 4.6246,0.25254 7.06317,0.0158 2.43858,-0.23675 4.86926,-0.77339 7.01583,-1.78355 0,0 0.26604,-1.64492 0.90636,-4.11934 0.64033,-2.47442 1.65495,-5.77833 3.15211,-9.09632 0.74858,-1.65899 1.6178,-3.32151 2.62118,-4.88561 1.00339,-1.5641 2.14094,-3.02979 3.42619,-4.29515 1.28525,-1.26535 2.7182,-2.33037 4.31237,-3.09311 1.59418,-0.76275 3.34959,-1.22323 5.27976,-1.27952 1.93017,-0.0563 3.80311,0.11476 5.6011,0.49466 1.79798,0.3799 3.52103,0.96865 5.1514,1.74774 1.63037,0.77909 3.16808,1.74855 4.5954,2.88986 1.42732,1.14131 2.74425,2.45449 3.93308,3.92103 1.18883,1.46654 2.24956,3.08645 3.16446,4.84124 0.9149,1.75479 1.68398,3.64445 2.28952,5.6505 0.60554,2.00605 1.04754,4.12848 1.30828,6.3488 0.26074,2.22032 0.34022,4.53853 0.22073,6.93613 -0.11949,2.39761 -0.801,4.93765 -1.96232,7.61807 -1.16132,2.68042 -2.80246,5.50123 -4.84123,8.46038 -1.01938,1.47958 -2.13817,2.99374 -3.34609,4.54223 -1.20792,1.54849 -2.50497,3.13131 -3.88088,4.7482 -1.37591,1.61689 -2.83067,3.26786 -4.35402,4.95265 -1.52335,1.68479 -3.11527,3.4034 -4.76551,5.15557 -1.65023,1.75217 -3.35878,3.53791 -5.11535,5.35695 -1.75658,1.81904 -3.56119,3.6714 -5.40357,5.5568 -1.84237,1.8854 -3.7225,3.80385 -5.63012,5.75511 -1.90761,1.95125 -3.84271,3.93531 -5.79502,5.9519 -1.95231,2.0166 -3.92183,4.06573 -5.89829,6.14716 -1.97646,2.08142 -3.95985,4.19513 -5.93991,6.34087 -1.98005,2.14574 -3.95677,4.32351 -5.91987,6.53306 -1.9631,2.20954 -3.91259,4.45087 -5.8382,6.72371 l -0.3788,5.80838 -0.37881,5.80837 -0.3788,5.80838 z",
    20,
    vec3.fromValues(0, 0, 0)
  );
  var logoParticles = particles.pointsToParticle(pointsLogo);

  var vertices = sphereParticles[0];
  //var verticesAlt = sphereParticles[0];
  var verticesAlt = logoParticles[0];
  var texturecoordinates = sphereParticles[1];
  //var normals = torusArr[2];

  scene.numVertices = vertices.length; // for drawing...

  var buffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
  gl.vertexAttribPointer(scene.shaderProgram.aVertexPosition, 3, gl.FLOAT, false, 0, 0);
  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);

  buffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
  gl.vertexAttribPointer(scene.shaderProgram.aTextureCoord, 2, gl.FLOAT, false, 0, 0);
  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(texturecoordinates), gl.STATIC_DRAW);

  // second mesh
  buffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
  gl.vertexAttribPointer(scene.shaderProgram.aVertexPositionAlt, 3, gl.FLOAT, false, 0, 0);
  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(verticesAlt), gl.STATIC_DRAW);

  // var buffer = gl.createBuffer();
  // gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
  // gl.vertexAttribPointer(scene.shaderProgram.aNormal, 3, gl.FLOAT, false, 0, 0);
  // gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(normals), gl.STATIC_DRAW);
}

function initTexture() {
  //scene.particleinit = loadTexture("img/particleinit.png");
  //scene.textureCracks = loadTexture("img/cracks.jpg");
}

function loadTexture(textureUrl) {
  var tex = gl.createTexture();
  tex.image = new Image();
  tex.image.onload = function() {
    gl.bindTexture(gl.TEXTURE_2D, tex);
    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, tex.image);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
    gl.bindTexture(gl.TEXTURE_2D, null);
  };

  // start loading
  tex.image.src = textureUrl;

  return tex;
}


function initScene(width, height) {
  // perspective
  scene.aspectRatio = width / height;
  mat4.perspective(scene.perspectiveMatrix, 45, scene.aspectRatio, 0.1, 100.0);

  // create translation Matrix
  scene.translationMatrix = mat4.create(); // so we start at identity again
  mat4.translate(scene.translationMatrix, scene.translationMatrix, [0.0, 0.0, -6.0]);
  mat4.rotateX(scene.mvMatrix, scene.translationMatrix, - (Math.PI / 2) * 0.7);

  // do other stuff there, no duplicate code
  updateScene(0);
}


function updateScene(deltaT) {
  scene.timer += deltaT;
  scene.morphState = (Math.sin(scene.timer * 0.0008) + 1) * 0.5;
}


function drawScene(deltaT) {
  // let time pass in the scene
  updateScene(deltaT);

  // clear drawing area
  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

  // load perspective- and MV-matrix
  gl.uniformMatrix4fv(scene.shaderProgram.uPMatrix, false, scene.perspectiveMatrix);
  gl.uniformMatrix4fv(scene.shaderProgram.uMVMatrix, false, scene.mvMatrix);
  gl.uniformMatrix3fv(scene.shaderProgram.uNMatrix, false, scene.normalMatrix);

  gl.uniform1f(scene.shaderProgram.uMorphTransition, scene.morphState);
  gl.uniform1f(scene.shaderProgram.uMorphTransition2, scene.morphState);

  gl.uniform1f(scene.shaderProgram.uAspectRatio, scene.aspectRatio);

  // load texture
  // gl.activeTexture(gl.TEXTURE0);
  //gl.bindTexture(gl.TEXTURE_2D, scene.particleinit);
  // gl.uniform1i(scene.shaderProgram.uSamplerParticleInit, 0); //textture0

  // gl.activeTexture(gl.TEXTURE1);
  // gl.bindTexture(gl.TEXTURE_2D, scene.textureCracks);
  // gl.uniform1i(scene.shaderProgram.uSamplerCracks, 1); //textture1


  // load light
  // gl.uniform3fv(scene.shaderProgram.uLightSourcePosition0, scene.lights.uLightSourcePosition0);

  // supply bump position
  // gl.uniform3fv(scene.shaderProgram.uBumpPosition, scene.uBumpPosition);

  // set flash color
  // gl.uniform4fv(scene.shaderProgram.uFlashColor, scene.flashActiveColor);


  // draw object
  gl.drawArrays(gl.TRIANGLES, 0, scene.numVertices / 3);
}

function getShader(gl, id) {
  var shaderScript = document.getElementById(id);

  if (!shaderScript) {
    return null;
  }

  var theSource = "";
  var currentChild = shaderScript.firstChild;

  while(currentChild) {
    if (currentChild.nodeType == 3) {
      theSource += currentChild.textContent;
    }

    currentChild = currentChild.nextSibling;
  }

  var shader;

  if (shaderScript.type == "x-shader/x-fragment") {
    shader = gl.createShader(gl.FRAGMENT_SHADER);
  } else if (shaderScript.type == "x-shader/x-vertex") {
    shader = gl.createShader(gl.VERTEX_SHADER);
  } else {
    return null;  // unknown shadertype
  }

  gl.shaderSource(shader, theSource);

  // compile the shader
  gl.compileShader(shader);

  // check if compilation was successful
  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
    alert("There was an error compiling the shader: " + gl.getShaderInfoLog(shader));
    return null;
  }

  return shader;
}


// let the fun begin!
document.addEventListener("DOMContentLoaded", start);
window.addEventListener("resize", resize);
